import itertools

import os
import pandas as pd
import numpy as np
import matplotlib
#I use TkAgg as this helps speed up plotting tremendously on Mac OS. You may want to change to GTKAgg on a Windows OS.                                   
matplotlib.use('TkAgg')
#matplotlib.use('GTKAgg')  
import matplotlib.pyplot as plt
from matplotlib import colors
#Set path where csv files of concern are                                                                                                                                
file_path='/Users/William/Desktop/Desktop/Projects/heart-sounds/ParseAudio/SetA/'

#This can be modified to loop through as subset of the csv files if you want to view more than one                                                                      

csvname='normal__201108011118.csv'

#append path to csv to the csv file name                                                                                                                                
fname=file_path+csvname

#This will be the parameter that passes to window duration. I'm setting it to 40ms here.                                                                                
windowduration=0.05

#This will be the amount by which the window shifts for each step in the spectrogram. I'm setting it to 50% overlap at each step                                        
windowshift=0.5*windowduration

def importdata(filename):
    #Create a Pandas dataframe from the csv note the column header will be the sample rate when using this approach                                                     
    df=pd.read_csv(filename,delimiter=',')

    #Extract data values into an array                                                                                                                                  
    data=df.values

    #Reshape into a 1D array                                                                                                                                            
    data=np.reshape(data,len(data))

    #Get the column header which is the rate in order to do low pass filtering                                                                                          
    rate=int(df.columns.values[0])

    return(rate,data)

def zero_cross(rate,data):

    #set windowsize in sample units                                                                                                                                     
    windowsize=2*int(np.floor(rate*windowduration/2))+1

    #set window shift in sample units                                                                                                                                   
    windowstep=2*int(np.floor(rate*windowshift/2))+1

    #figure out how many shifts are possible                                                                                                                            
    totalsteps=int(np.floor((len(data)-windowsize)/windowstep))

    #Using a gaussian window for now. Plan to modify later                                                                                                              
    window=np.exp(-np.power(range(-int(np.floor(windowsize/2)),int(np.floor(windowsize/2)+1)),2)/(2*(windowsize*0.5)**2))
    
    zerocross=[]
    
    for i in range(0,totalsteps):

        windata=data[(0+windowstep*i):(windowsize+windowstep*i)]

        zerocross.append(len(list(itertools.groupby(windata, lambda windata: windata > 0)))-1)


    plt.plot(zerocross)
    plt.show()
    plt.close()


rat,dat=importdata(fname)

zero_cross(rat,dat)

        
